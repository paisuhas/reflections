Q. What happens when you initialize a repository? Why do you need to do it?
A. When I initialize a repository, git creates the metadata files needed to keep track of my repository. I need to do it to enable git to keep track of my changes to the repository.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?
A. Staging area is different from the working area in that the staging area only contains files that are to be a part of the next commit. Having a staging area helps us avoid having to commit all changes made to the repository at once. The commits can be made in a sequence of logical changes.

Q. How can you use the staging area to make sure you have one commit per logical change?
A. Use git diff --staged to verify that the output you see is the logical change you wish to commit.

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A. Branches are helpful when we want to try out an experiment on the codebase but do not want to commit it to the main code. So we use branches to create a copy of the code and try out our experiments in the branch. Branches can also be used when a single project has two different end goals. We can build up the fundamental code on the master branch and then branch to create 2 different offshoots.

Q. How do the diagrams help you visualize the branch structure?
A. The diagrams help me visualize the origins of branches and the reachability of commits.

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A. Merging two branches together combines the changes made in both the branches and puts it at the head of one of the branches. The branches are represented so because the parents for commits are different in each branch. Once they are merged, we can continue on the merged branch.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A. Doing merges manually can be very tedious. Git's automatic merging can be very useful when the merges are straight forward.
Git's automatic merging is not intelligent enough to make merge decisons on its own in more complex scenarios. It relies on the user to make the decisions for it and hence automatic merging can still require manual intervention.
Doing automatic merging also preserves the history of commits in both branches. Doing manual merging makes us see the merge as one big commit including all the commits made in the branch being merged as one logical change. This can make it hard to understand the changes made in the branch and also to track down any bugs that may have been introduced in the branch.
